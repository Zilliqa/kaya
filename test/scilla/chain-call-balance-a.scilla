scilla_version 0

library Test

let three_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
  fun (msg3 : Message) =>
    let nil_msg = Nil {Message} in
    let one_msg = Cons {Message} msg3 nil_msg in
    let two_msgs = Cons {Message} msg2 one_msg in
    Cons {Message} msg1 two_msgs

contract Test
()

field last_amount: Uint128 = Uint128 0

(* Call contrB, passing contrC to it. Also pass on _amount. Emit event. *)
transition acceptAAndTransferToBAndCallC (addrB : ByStr20, addrC : ByStr20)
  accept;

  last_amount := _amount;
  one_third_amount =
    let three = Uint128 3 in
      builtin div _amount three;

  e = {_eventname: "A"};
  event e;

  msg1 = { _tag : "acceptBAndTransferToC"; _amount : one_third_amount; _recipient : addrB; addrC : addrC };
  msg2 = { _tag : "simplyAccept"; _amount : one_third_amount; _recipient : addrC };
  msg3 = { _tag : "noAcceptC"; _amount : one_third_amount; _recipient : addrC };
  msgs = three_msgs msg1 msg2 msg3;
  send msgs
end

transition simplyAccept ()
  accept;

  last_amount := _amount;

  e = {_eventname: "B"};
  event e
end
